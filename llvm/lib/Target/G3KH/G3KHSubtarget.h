//===-- G3KHSubtarget.h - Define Subtarget for the G3KH ----*- C++ -*--===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file declares the G3KH specific subclass of TargetSubtargetInfo.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_G3KH_G3KHSUBTARGET_H
#define LLVM_LIB_TARGET_G3KH_G3KHSUBTARGET_H

#include "G3KHFrameLowering.h"
#include "G3KHISelLowering.h"
#include "G3KHInstrInfo.h"
#include "G3KHRegisterInfo.h"
#include "llvm/CodeGen/SelectionDAGTargetInfo.h"
#include "llvm/CodeGen/TargetSubtargetInfo.h"
#include "llvm/IR/DataLayout.h"
#include <string>

#define GET_SUBTARGETINFO_HEADER
#include "G3KHGenSubtargetInfo.inc"

namespace llvm {
class StringRef;

class G3KHSubtarget : public G3KHGenSubtargetInfo {
public:
  enum HWMultEnum {
    NoHWMult, HWMult16, HWMult32, HWMultF5
  };

private:
  virtual void anchor();
  bool FPURegister = false;
  bool CacheRegister = false;
  bool ExtendedInsts = false;
  HWMultEnum HWMultMode = NoHWMult;
  G3KHFrameLowering FrameLowering;
  G3KHInstrInfo InstrInfo;
  G3KHTargetLowering TLInfo;
  SelectionDAGTargetInfo TSInfo;

public:
  /// This constructor initializes the data members to match that
  /// of the specified triple.
  ///
  G3KHSubtarget(const Triple &TT, const std::string &CPU,
                  const std::string &FS, const TargetMachine &TM);

  G3KHSubtarget &initializeSubtargetDependencies(StringRef CPU, StringRef FS);

  /// ParseSubtargetFeatures - Parses features string setting specified
  /// subtarget options.  Definition of function is auto generated by tblgen.
  void ParseSubtargetFeatures(StringRef CPU, StringRef TuneCPU, StringRef FS);

  bool hasHWMult16() const { return HWMultMode == HWMult16; }
  bool hasHWMult32() const { return HWMultMode == HWMult32; }
  bool hasHWMultF5() const { return HWMultMode == HWMultF5; }

  const TargetFrameLowering *getFrameLowering() const override {
    return &FrameLowering;
  }
  const G3KHInstrInfo *getInstrInfo() const override { return &InstrInfo; }
  const TargetRegisterInfo *getRegisterInfo() const override {
    return &InstrInfo.getRegisterInfo();
  }
  const G3KHTargetLowering *getTargetLowering() const override {
    return &TLInfo;
  }
  const SelectionDAGTargetInfo *getSelectionDAGInfo() const override {
    return &TSInfo;
  }
};
} // End llvm namespace

#endif  // LLVM_TARGET_G3KH_SUBTARGET_H
